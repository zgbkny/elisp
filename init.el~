(require 'cl)
(tool-bar-mode -1)

;;;;; 自动启动smex
(require 'smex) ; Not needed if you use package.el
(smex-initialize) ; Can be omitted. This might cause a (minimal) delay
                  ; when Smex is auto-initialized on its first run.
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

;;;;; 高亮当前行 turn on highlighting current line
(global-hl-line-mode 1)

;;;;;加载配色主题
(add-to-list 'custom-theme-load-path "~/.emacs.d/elisp/themes/")
(load-theme 'molokai t)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("c3c0a3702e1d6c0373a0f6a557788dfd49ec9e66e753fb24493579859c8e95ab" default))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;;;;;设置tab
(setq-default indent-tabs-mode nil)
(setq default-tab-width 4)

;;;;;显示括号匹配 
(show-paren-mode t)
(setq show-paren-style 'parentheses)

;;;;;显示列号
(setq column-number-mode t)
(setq line-number-mode t)

;;;;;显示时间，格式如下
(display-time-mode 1) 
(setq display-time-24hr-format t) 
(setq display-time-day-and-date t) 
(transient-mark-mode t)

;;;;;在标题栏提示你目前在什么位置
(setq frame-title-format "wangwei@%b")

;;;;; 设置字体
;;;;; 方法为: emacs->options->Set Default Font->"M-x describe-font"查看当前使用的字体名称、字体大小
;;(set-default-font " -bitstream-Courier 10 Pitch-normal-normal-normal-*-16-*-*-*-m-0-iso10646-1")
(set-default-font "bitstream vera sans mono-12")
(set-fontset-font "fontset-default"  
                  'gb18030' ("微软雅黑" . "unicode-bmp"))
;;(set-default-font "Courier New-14")


(defun copy-line (&optional arg)
 "Save current line into Kill-Ring without mark the line"
 (interactive "P")
 (let ((beg (line-beginning-position)) 
	(end (line-end-position arg)))
 (copy-region-as-kill beg end))
)


(defun copy-word (&optional arg)
 "Copy words at point"
 (interactive "P")
 (let ((beg (progn (if (looking-back "[a-zA-Z0-9]" 1) (backward-word 1)) (point))) 
	(end (progn (forward-word arg) (point))))
 (copy-region-as-kill beg end))
)


(defun copy-paragraph (&optional arg)
 "Copy paragraphes at point"
 (interactive "P")
 (let ((beg (progn (backward-paragraph 1) (point))) 
	(end (progn (forward-paragraph arg) (point))))
 (copy-region-as-kill beg end))
)


(require 'thingatpt)

(defface feng-highlight-at-point-face
  `((((class color) (background light))
     (:background "light green"))
    (((class color) (background dark))
     (:background "royal blue")))
  "Face for highlighting variables"
  :group 'feng-highlight)

(defvar current-highlighted nil)
(defvar highlighted-history-length 2)
(defvar highlighted-history '())

(make-variable-buffer-local 'current-highlighted)
(make-variable-buffer-local 'highlighted-history)

(defun feng-highlight-regex (target)
  (if (and (eq major-mode 'clojure-mode) ; clojure-mode
           (eq (search ":" target) 0))
      (concat (regexp-quote target) "\\>")
    (concat "\\<" (regexp-quote target) "\\>")))

(defun feng-at-point-prev ()
  (interactive)
  (when current-highlighted
    (unless (re-search-backward
             (feng-highlight-regex current-highlighted) nil t)
      (message "search hit TOP, continue from BOTTOM")
      (goto-char (point-max))
      (feng-at-point-prev))))

(defun feng-at-point-next ()
  (interactive)
  (when current-highlighted
    (forward-char (+ 1 (length current-highlighted))) ; more out of current
    (if (re-search-forward
         (feng-highlight-regex current-highlighted) nil t)
        (backward-char (length current-highlighted))
      (backward-char (+ 1 (length current-highlighted)))
      (message "search hit BOTTOM, continue from TOP")
      (goto-char (point-min))
      (feng-at-point-next))))

(defun feng-at-point-replace ()
  (interactive)
  (when current-highlighted
    (save-excursion
      (goto-char (point-min))           ;; back to top
      (feng-at-point-next)              ;; find first
      (setq isearch-string current-highlighted)
      (isearch-query-replace))))

(defvar feng-highlight-at-point-keymap
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "M-n") 'feng-at-point-next)
    (define-key map (kbd "M-r") 'feng-at-point-replace)
    (define-key map (kbd "M-p") 'feng-at-point-prev)
    map))

(defun feng-highlight-add-to-hisotry (target)
  (let ((l (remove-if (lambda (h)
                        (string= target (second h))) highlighted-history))
        (n (list (point) target)))
    (setq highlighted-history (subseq (cons n l) 0 highlighted-history-length))))

(defun feng-highlight-at-point (&optional arg)
  (interactive "p")
  (remove-overlays (point-min) (point-max) 'feng-highlight t)
  (let* ((target-symbol (symbol-at-point))
         (target (symbol-name target-symbol)))
    (when target-symbol
      (setq current-highlighted target)
      (if (= arg 1)
          (feng-highlight-add-to-hisotry target))
      (save-excursion
        (goto-char (point-min))
        (let* ((regexp (feng-highlight-regex target))
               (len (length target))
               (end (re-search-forward regexp nil t)))
          (while end
            (let ((ovl (make-overlay (- end len) end)))
              (overlay-put ovl 'keymap feng-highlight-at-point-keymap)
              (overlay-put ovl 'face 'feng-highlight-at-point-face)
              (overlay-put ovl 'feng-highlight t))
            (setq end (re-search-forward regexp nil t))))))))

;;; cycle highlight-hisoty ring
(defun feng-highlight-history-prev ()
  (interactive)
  (if highlighted-history
      (let ((f (car highlighted-history)))
        (setq highlighted-history
              (append (remove-if-not 'identity (rest highlighted-history)) (list f)))
        (goto-char (car f))
        (feng-highlight-at-point 10))
    (message "No history yet")))

(provide 'feng-highlight)

(global-set-key (kbd "M-i") 'feng-highlight-at-point)


(defun move-region-up (beg end)
  (interactive "r")
  (move-region-around 'up beg end))

(defun move-region-down (beg end)
  (interactive "r")
  (move-region-around 'down beg end))

(global-set-key (quote [M-up]) (quote move-region-up))
(global-set-key (quote [M-down]) (quote move-region-down))
